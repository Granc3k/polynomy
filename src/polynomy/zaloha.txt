Ráda vám pomohu s úlohou v jazyce Java. Zde je základní nástin řešení.

Třída Polynom

Třída Polynom bude reprezentovat polynom a bude mít následující privátní atributy:

java
Copy code
private final double[] coefficients; // pole koeficientů
Pro zapouzdření pole koeficientů budeme v konstruktoru třídy vytvářet nové pole a zkopírujeme hodnoty z parametru konstruktoru pomocí metody System.arraycopy().

Konstruktor třídy Polynom pro vytvoření instance polynomu z pole koeficientů:

java
Copy code
public Polynom(double[] coefficients) {
    this.coefficients = new double[coefficients.length];
    System.arraycopy(coefficients, 0, this.coefficients, 0, coefficients.length);
}
Metoda getDegree() bude vracet stupeň polynomu jako celé číslo. Stupeň polynomu bude délka pole koeficientů minus jedna.

java
Copy code
public int getDegree() {
    return coefficients.length - 1;
}
Metoda getCoefficient(int index) bude vracet hodnotu koeficientu polynomu podle indexu. Pokud bude index mimo rozsah pole koeficientů, bude metoda vrátit výjimku IndexOutOfBoundsException.

java
Copy code
public double getCoefficient(int index) {
    if (index < 0 || index >= coefficients.length) {
        throw new IndexOutOfBoundsException("Index out of range: " + index);
    }
    return coefficients[index];
}
Metoda evaluate(double x) bude vypočítávat hodnotu polynomu pro konkrétní hodnotu x pomocí Hornerova schématu.

java
Copy code
public double evaluate(double x) {
    double result = coefficients[coefficients.length - 1];
    for (int i = coefficients.length - 2; i >= 0; i--) {
        result = result * x + coefficients[i];
    }
    return result;
}
Metoda derivative() bude vracet novou instanci třídy Polynom, která bude reprezentovat derivaci aktuálního polynomu.

java
Copy code
public Polynom derivative() {
    if (coefficients.length == 1) {
        return new Polynom(new double[] {0.0}); // konstanta => derivace = 0
    }
    double[] derivativeCoefficients = new double[coefficients.length - 1];
    for (int i = 1; i < coefficients.length; i++) {
        derivativeCoefficients[i - 1] = coefficients[i] * i;
    }
    return new Polynom(derivativeCoefficients);
}
Metoda toString() bude vracet textový řetězec s textovým zápisem polynomu ve vhodném tvaru. Použijeme tuto formu: "an x^n + a(n-1) x^(n-1) + ... + a1 x + a0".

java
Copy code
@Override
public String toString() {
    StringBuilder sb = new StringBuilder();
    for (int i = coefficients.length - 1; i >= 0; i--) {



---------------------------------------------------------------------------------------------------------------------------------------------------




public class Polynom {
    private final double[] coefficients;

    public Polynom(double[] coefficients) {
        this.coefficients = Arrays.copyOf(coefficients, coefficients.length);
    }

    public Polynom(double coefficient) {
        this(new double[] { coefficient });
    }

    public Polynom(double c0, double c1) {
        this(new double[] { c0, c1 });
    }

    // další konstruktory s různým počtem parametrů

    public int getDegree() {
        return coefficients.length - 1;
    }

    public double getCoefficient(int i) {
        return coefficients[i];
    }

    public double evaluate(double x) {
        double result = coefficients[0];
        for (int i = 1; i < coefficients.length; i++) {
            result = result * x + coefficients[i];
        }
        return result;
    }

    public Polynom differentiate() {
        if (getDegree() == 0) {
            return new Polynom(0);
        }
        double[] derivativeCoeffs = new double[getDegree()];
        for (int i = 0; i < getDegree(); i++) {
            derivativeCoeffs[i] = coefficients[i+1] * (i+1);
        }
        return new Polynom(derivativeCoeffs);
    }

    public String toString() {
        StringBuilder sb = new StringBuilder();
        for (int i = getDegree(); i >= 0; i--) {
            if (i > 1) {
                sb.append(coefficients[i] + "x^" + i + " + ");
            } else if (i == 1) {
                sb.append(coefficients[i] + "x + ");
            } else {
                sb.append(coefficients[i]);
            }
        }
        return sb.toString();
    }
}


---------------------------------------------------------------------------------------------------------------------------------------------



    private final double[] coefficients;

    public Polynomy_chat(double... coeffs) {
            this.coefficients = new double[coeffs.length];
            System.arraycopy(coeffs, 0, this.coefficients, 0, coeffs.length);
        }

    public Polynomy_chat(int degree) {
            this.coefficients = new double[degree + 1];
        }

    public Polynomy_chat(double constant) {
            this(0);
            this.coefficients[0] = constant;
        }

    public Polynomy_chat(double constant, double linear) {
            this(1);
            this.coefficients[0] = constant;
            this.coefficients[1] = linear;
        }

    public Polynomy_chat(double constant, double linear, double quadratic) {
            this(2);
            this.coefficients[0] = constant;
            this.coefficients[1] = linear;
            this.coefficients[2] = quadratic;
        }

    public Polynomy_chat(double[] coeffs) {
            this.coefficients = new double[coeffs.length];
            System.arraycopy(coeffs, 0, this.coefficients, 0, coeffs.length);
        }

    public int degree() {
        return coefficients.length - 1;
    }

    public double coefficient(int index) {
        if (index < 0 || index >= coefficients.length) {
            throw new IllegalArgumentException("Invalid coefficient index");
        }
        return coefficients[index];
    }

    public double evaluate(double x) {
        double result = 0.0;
        for (int i = degree(); i >= 0; i--) {
            result = coefficients[i] + (x * result);
        }
        return result;
    }

    public Polynomy_chat differentiate() {
        if (degree() == 0) {
            return new Polynomy_chat(0);
        }
        double[] derivCoeffs = new double[degree()];
        for (int i = 0; i < degree(); i++) {
            derivCoeffs[i] = coefficients[i + 1] * (i + 1);
        }
        return new Polynomy_chat(derivCoeffs);
    }

    public String toString() {
        String vypis = "";
        for (int i = degree(); i >= 0; i--) {
            if (i > 0) {
                vypis+=coefficients[i]+"x^ + "+i;
            } else {
                vypis+=coefficients[i];
            }
        }
        return vypis;
    }
}
